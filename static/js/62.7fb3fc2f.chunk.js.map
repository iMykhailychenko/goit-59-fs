{"version":3,"file":"static/js/62.7fb3fc2f.chunk.js","mappings":"8OASMA,GAAO,IAAIC,MAAOC,cAClBC,EAAe,CACnBC,MAAO,GACPC,WAAY,GACZC,UAAW,GACXC,SAAU,IA2GZ,UAxGiB,WACf,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAkCC,EAAAA,EAAAA,WAAS,GAAM,eAA1CC,EAAS,KAAEC,EAAY,KAC9B,GAA4BF,EAAAA,EAAAA,UAASP,GAAa,eAA3CU,EAAM,KAAEC,EAAS,KAExB,GAA4BJ,EAAAA,EAAAA,WAAS,GAAK,eAAnCK,EAAM,KAAEC,EAAS,KAElBC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBC,EAAK,EAALA,MAAOC,EAAI,EAAJA,KACfP,GAAU,SAAAQ,GAAI,yBAAUA,GAAI,cAAGD,EAAOD,GAAK,GAC7C,EAEMG,EAAY,yCAAG,WAAOL,GAAK,sEAIV,OAHrBA,EAAMM,iBAAiB,SAGrBZ,GAAa,GAAM,SACba,EAAAA,GAAAA,KAAe,gBAAiBZ,GAAQ,KAAD,kBACvCL,GAASkB,EAAAA,EAAAA,GAAe,CAAEtB,MAAOS,EAAOT,MAAOG,SAAUM,EAAON,YAAaoB,SAAS,KAAD,EAE3Ff,GAAa,GACbgB,EAAAA,GAAAA,QAAc,YAAY,kDAE1BC,QAAQC,IAAI,EAAD,IACXF,EAAAA,GAAAA,MAAY,cAAc,0DAE7B,gBAdiB,sCAgBlB,OACE,gCACGjB,IAAa,wCAEd,kBAAMoB,OAAO,IAAIC,UAAU,mBAAmBC,MAAO,CAAEC,MAAO,SAAWC,SAAUZ,EAAa,WAC9F,eAAIS,UAAU,oBAAmB,6BAEjC,iBAAKA,UAAU,qBAAoB,WACjC,kBACEI,GAAG,QACHf,KAAK,QACLgB,KAAK,QACLC,aAAa,WACblB,MAAOP,EAAOT,MACdmC,SAAUtB,EACVe,UAAU,kBAEZ,kBAAOQ,QAAQ,QAAO,+BAGxB,iBAAKR,UAAU,qBAAoB,WACjC,kBACEI,GAAG,aACHf,KAAK,aACLgB,KAAK,aACLC,aAAa,MACblB,MAAOP,EAAOR,WACdkC,SAAUtB,EACVe,UAAU,kBAEZ,kBAAOQ,QAAQ,aAAY,4BAG7B,iBAAKR,UAAU,qBAAoB,WACjC,kBACEI,GAAG,YACHf,KAAK,YACLgB,KAAK,YACLC,aAAa,MACblB,MAAOP,EAAOP,UACdiC,SAAUtB,EACVe,UAAU,kBAEZ,kBAAOQ,QAAQ,YAAW,2BAG5B,iBAAKR,UAAU,qBAAoB,WACjC,kBACEI,GAAG,WACHf,KAAK,WACLgB,KAAMtB,EAAS,WAAa,OAC5BuB,aAAa,mBACblB,MAAOP,EAAON,SACdgC,SAAUtB,EACVe,UAAU,kBAEZ,kBAAOQ,QAAQ,WAAU,0BAG3B,mBAAQH,KAAK,SAASI,QAAS,kBAAMzB,GAAU,SAAAM,GAAI,OAAKA,CAAI,GAAC,EAAC,qBAI9D,SAAC,KAAI,CAACoB,GAAG,SAASV,UAAU,eAAc,mCAI1C,mBAAQA,UAAU,oCAAoCK,KAAK,SAAQ,sBAGnE,eAAGL,UAAU,uBAAsB,kBAAIhC,UAI/C,C","sources":["pages/JoinPage/JoinPage.jsx"],"sourcesContent":["import { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { publicApi } from '../../http/http';\nimport { authLoginThunk } from '../../redux/auth/auth.thunk';\n\nconst year = new Date().getFullYear();\nconst initialState = {\n  email: '',\n  first_name: '',\n  last_name: '',\n  password: '',\n};\n\nconst JoinPage = () => {\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n  const [values, setValues] = useState(initialState);\n\n  const [isPass, setIsPass] = useState(true);\n\n  const handleChange = event => {\n    const { value, name } = event.target;\n    setValues(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      setIsLoading(true);\n      await publicApi.post('/users/create', values);\n      await dispatch(authLoginThunk({ email: values.email, password: values.password })).unwrap();\n\n      setIsLoading(false);\n      toast.success('Success!');\n    } catch (e) {\n      console.log(e);\n      toast.error('Some error');\n    }\n  };\n\n  return (\n    <>\n      {isLoading && <p>Loading ...</p>}\n\n      <form action=\"#\" className=\"mt-5 mx-auto p-0\" style={{ width: '450px' }} onSubmit={handleSubmit}>\n        <h1 className=\"h3 mb-3 fw-normal\">Please Sign In</h1>\n\n        <div className=\"form-floating my-4\">\n          <input\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"username\"\n            value={values.email}\n            onChange={handleChange}\n            className=\"form-control\"\n          />\n          <label htmlFor=\"email\">Email address</label>\n        </div>\n\n        <div className=\"form-floating my-4\">\n          <input\n            id=\"first_name\"\n            name=\"first_name\"\n            type=\"first_name\"\n            autoComplete=\"off\"\n            value={values.first_name}\n            onChange={handleChange}\n            className=\"form-control\"\n          />\n          <label htmlFor=\"first_name\">First Name</label>\n        </div>\n\n        <div className=\"form-floating my-4\">\n          <input\n            id=\"last_name\"\n            name=\"last_name\"\n            type=\"last_name\"\n            autoComplete=\"off\"\n            value={values.last_name}\n            onChange={handleChange}\n            className=\"form-control\"\n          />\n          <label htmlFor=\"last_name\">Last Name</label>\n        </div>\n\n        <div className=\"form-floating my-4\">\n          <input\n            id=\"password\"\n            name=\"password\"\n            type={isPass ? 'password' : 'text'}\n            autoComplete=\"current-password\"\n            value={values.password}\n            onChange={handleChange}\n            className=\"form-control\"\n          />\n          <label htmlFor=\"password\">Password</label>\n        </div>\n\n        <button type=\"button\" onClick={() => setIsPass(prev => !prev)}>\n          toggle\n        </button>\n\n        <Link to=\"/login\" className=\"d-block my-4\">\n          Already has account?\n        </Link>\n\n        <button className=\"w-100 mt-2 btn btn-lg btn-primary\" type=\"submit\">\n          Sign In\n        </button>\n        <p className=\"mt-5 mb-3 text-muted\">Â© {year}</p>\n      </form>\n    </>\n  );\n};\n\nexport default JoinPage;\n"],"names":["year","Date","getFullYear","initialState","email","first_name","last_name","password","dispatch","useDispatch","useState","isLoading","setIsLoading","values","setValues","isPass","setIsPass","handleChange","event","target","value","name","prev","handleSubmit","preventDefault","publicApi","authLoginThunk","unwrap","toast","console","log","action","className","style","width","onSubmit","id","type","autoComplete","onChange","htmlFor","onClick","to"],"sourceRoot":""}